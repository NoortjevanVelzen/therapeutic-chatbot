{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20184080\\\\OneDrive - TU Eindhoven\\\\Documents\\\\2. Industrial Design\\\\Final Master Project\\\\therapeutic-chatbot\\\\frontend\\\\src\\\\components\\\\SocialMediaScreen.js\",\n  _s = $RefreshSig$();\n// src/components/SocialMediaScreen.js\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"http://localhost:5000\";\nexport default function SocialMediaFeed({\n  userInput\n}) {\n  _s();\n  // We’ll treat each “feed item” as just a { prompt } for now,\n  // because the backend only returns a text prompt.\n  const [feed, setFeed] = useState([]);\n  const [mood, setMood] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Step 1: Extract mood from user input\n  //   ➜ Backend route is POST /api/detect-mood { text: string }\n  //   Response is { mood: \"<top-emotion>\" }\n  async function detectMood(text) {\n    try {\n      const res = await axios.post(`${BACKEND_URL}/api/detect-mood`, {\n        text\n      });\n      return res.data.mood;\n    } catch (e) {\n      // If anything goes wrong, default to \"neutral\"\n      return \"neutral\";\n    }\n  }\n\n  // Step 2: Generate a DALL·E prompt based on that mood\n  //   ➜ Backend route is POST /api/generate-prompt { mood: string }\n  //   Response is { dallePrompt: \"<text prompt>\" }\n  async function getPrompt(mood) {\n    try {\n      const res = await axios.post(`${BACKEND_URL}/api/generate-prompt`, {\n        mood\n      });\n      return res.data.dallePrompt;\n    } catch (e) {\n      throw new Error(\"Prompt generation failed\");\n    }\n  }\n\n  // When the user clicks “Generate Mood Feed,” we do:\n  //   1) detectMood(userInput)\n  //   2) getPrompt(detectedMood)\n  //   3) setFeed([{ prompt }]) so the UI can render it\n  async function handleGenerateFeed() {\n    setLoading(true);\n    setError(null);\n    setFeed([]);\n    try {\n      // 1. Determine mood (or fall back to \"neutral\" if no userInput)\n      const extractedMood = userInput ? await detectMood(userInput) : \"neutral\";\n      setMood(extractedMood);\n\n      // 2. Generate a DALL·E prompt for that mood\n      const promptText = await getPrompt(extractedMood);\n\n      // 3. Update the “feed” with one item that has { prompt }\n      setFeed([{\n        prompt: promptText\n      }]);\n    } catch (e) {\n      setError(\"Failed to generate feed. Try again.\");\n      console.error(e);\n    }\n    setLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"40px auto\",\n      padding: 24,\n      background: \"#fafafa\",\n      borderRadius: 16,\n      boxShadow: \"0 3px 12px rgba(0,0,0,0.08)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        marginBottom: 20\n      },\n      children: \"Social Mood Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateFeed,\n      disabled: loading,\n      style: {\n        background: \"#333\",\n        color: \"#fff\",\n        fontSize: 18,\n        border: \"none\",\n        borderRadius: 8,\n        padding: \"12px 24px\",\n        margin: \"0 auto 30px auto\",\n        display: \"block\",\n        cursor: loading ? \"wait\" : \"pointer\"\n      },\n      children: loading ? \"Generating...\" : \"Generate Mood Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        margin: 16\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), mood && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginBottom: 12\n      },\n      children: [\"Detected mood: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: mood\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), feed.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: \"24px\"\n      },\n      children: feed.map((post, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: \"#fff\",\n          borderRadius: 12,\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.07)\",\n          padding: 18,\n          width: 350\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"#222\",\n            fontWeight: 500,\n            fontSize: 16,\n            marginBottom: 8\n          },\n          children: post.prompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"#999\",\n            fontSize: 13\n          },\n          children: [\"#\", mood, \"vibes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(SocialMediaFeed, \"rqW8pz0+UfPkBUmx5Bq1ZVyLRH0=\");\n_c = SocialMediaFeed;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaFeed\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","BACKEND_URL","SocialMediaFeed","userInput","_s","feed","setFeed","mood","setMood","loading","setLoading","error","setError","detectMood","text","res","post","data","e","getPrompt","dallePrompt","Error","handleGenerateFeed","extractedMood","promptText","prompt","console","style","maxWidth","margin","padding","background","borderRadius","boxShadow","children","textAlign","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","color","fontSize","border","display","cursor","length","flexDirection","alignItems","gap","map","idx","width","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/20184080/OneDrive - TU Eindhoven/Documents/2. Industrial Design/Final Master Project/therapeutic-chatbot/frontend/src/components/SocialMediaScreen.js"],"sourcesContent":["// src/components/SocialMediaScreen.js\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst BACKEND_URL = \"http://localhost:5000\";\r\n\r\nexport default function SocialMediaFeed({ userInput }) {\r\n  // We’ll treat each “feed item” as just a { prompt } for now,\r\n  // because the backend only returns a text prompt.\r\n  const [feed, setFeed] = useState([]); \r\n  const [mood, setMood] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Step 1: Extract mood from user input\r\n  //   ➜ Backend route is POST /api/detect-mood { text: string }\r\n  //   Response is { mood: \"<top-emotion>\" }\r\n  async function detectMood(text) {\r\n    try {\r\n      const res = await axios.post(`${BACKEND_URL}/api/detect-mood`, { text });\r\n      return res.data.mood;\r\n    } catch (e) {\r\n      // If anything goes wrong, default to \"neutral\"\r\n      return \"neutral\";\r\n    }\r\n  }\r\n\r\n  // Step 2: Generate a DALL·E prompt based on that mood\r\n  //   ➜ Backend route is POST /api/generate-prompt { mood: string }\r\n  //   Response is { dallePrompt: \"<text prompt>\" }\r\n  async function getPrompt(mood) {\r\n    try {\r\n      const res = await axios.post(`${BACKEND_URL}/api/generate-prompt`, { mood });\r\n      return res.data.dallePrompt;\r\n    } catch (e) {\r\n      throw new Error(\"Prompt generation failed\");\r\n    }\r\n  }\r\n\r\n  // When the user clicks “Generate Mood Feed,” we do:\r\n  //   1) detectMood(userInput)\r\n  //   2) getPrompt(detectedMood)\r\n  //   3) setFeed([{ prompt }]) so the UI can render it\r\n  async function handleGenerateFeed() {\r\n    setLoading(true);\r\n    setError(null);\r\n    setFeed([]);\r\n    \r\n    try {\r\n      // 1. Determine mood (or fall back to \"neutral\" if no userInput)\r\n      const extractedMood = userInput ? await detectMood(userInput) : \"neutral\";\r\n      setMood(extractedMood);\r\n\r\n      // 2. Generate a DALL·E prompt for that mood\r\n      const promptText = await getPrompt(extractedMood);\r\n\r\n      // 3. Update the “feed” with one item that has { prompt }\r\n      setFeed([{ prompt: promptText }]);\r\n    } catch (e) {\r\n      setError(\"Failed to generate feed. Try again.\");\r\n      console.error(e);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxWidth: 600,\r\n        margin: \"40px auto\",\r\n        padding: 24,\r\n        background: \"#fafafa\",\r\n        borderRadius: 16,\r\n        boxShadow: \"0 3px 12px rgba(0,0,0,0.08)\",\r\n      }}\r\n    >\r\n      <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>Social Mood Feed</h2>\r\n\r\n      <button\r\n        onClick={handleGenerateFeed}\r\n        disabled={loading}\r\n        style={{\r\n          background: \"#333\",\r\n          color: \"#fff\",\r\n          fontSize: 18,\r\n          border: \"none\",\r\n          borderRadius: 8,\r\n          padding: \"12px 24px\",\r\n          margin: \"0 auto 30px auto\",\r\n          display: \"block\",\r\n          cursor: loading ? \"wait\" : \"pointer\",\r\n        }}\r\n      >\r\n        {loading ? \"Generating...\" : \"Generate Mood Feed\"}\r\n      </button>\r\n\r\n      {error && <div style={{ color: \"red\", margin: 16 }}>{error}</div>}\r\n\r\n      {mood && (\r\n        <div style={{ textAlign: \"center\", marginBottom: 12 }}>\r\n          Detected mood: <b>{mood}</b>\r\n        </div>\r\n      )}\r\n\r\n      {feed.length > 0 && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            gap: \"24px\",\r\n          }}\r\n        >\r\n          {feed.map((post, idx) => (\r\n            <div\r\n              key={idx}\r\n              style={{\r\n                background: \"#fff\",\r\n                borderRadius: 12,\r\n                boxShadow: \"0 2px 8px rgba(0,0,0,0.07)\",\r\n                padding: 18,\r\n                width: 350,\r\n              }}\r\n            >\r\n              {/* Since there’s no image URL yet, we simply render the prompt text */}\r\n              <div\r\n                style={{\r\n                  color: \"#222\",\r\n                  fontWeight: 500,\r\n                  fontSize: 16,\r\n                  marginBottom: 8,\r\n                }}\r\n              >\r\n                {post.prompt}\r\n              </div>\r\n              <div style={{ color: \"#999\", fontSize: 13 }}>\r\n                #{mood}vibes\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}