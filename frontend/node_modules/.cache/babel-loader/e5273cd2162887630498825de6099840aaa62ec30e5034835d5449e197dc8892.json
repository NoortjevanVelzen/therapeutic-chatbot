{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20184080\\\\OneDrive - TU Eindhoven\\\\Documents\\\\2. Industrial Design\\\\Final Master Project\\\\therapeutic-chatbot\\\\frontend\\\\src\\\\components\\\\SocialMediaScreen.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/SocialMediaScreen.js\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"http://localhost:5000\"; // adjust if your server runs elsewhere\n\n/**\r\n * Calls your backend’s `/api/mood-description` endpoint.\r\n * Returns a 1–2 sentence description from OpenAI, or a simple fallback if it fails.\r\n */\nasync function getMoodDescription(mood) {\n  if (!mood || typeof mood !== \"string\") {\n    return \"\";\n  }\n  try {\n    const res = await axios.post(`${BACKEND_URL}/api/mood-description`, {\n      mood: mood.trim()\n    });\n    return res.data.description; // e.g. \"When someone feels happy, it often means…\"\n  } catch (err) {\n    console.error(\"Failed to fetch mood description:\", err);\n    // Fallback: a simple local message\n    return `You seem to be feeling ${mood}.`;\n  }\n}\n\n/**\r\n * -------------------------------------------------------------\r\n *  DEFAULT EXPORT: SocialMediaScreen\r\n *\r\n *  - Shows a header with “Mood detected: X” and a 1–2 sentence\r\n *    description (fetched from /api/mood-description).\r\n *  - Renders <SocialMediaFeed mood={mood} /> underneath.\r\n * -------------------------------------------------------------\r\n */\nexport default function SocialMediaScreen({\n  userMessages\n}) {\n  _s();\n  const [mood, setMood] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [loadingDesc, setLoadingDesc] = useState(false);\n\n  // 1) Whenever `userMessages` changes, call `/api/mood`.\n  useEffect(() => {\n    async function fetchMood() {\n      if (!Array.isArray(userMessages) || userMessages.length === 0) {\n        // No user messages yet—clear mood\n        setMood(\"\");\n        return;\n      }\n      try {\n        // Call your backend’s `/api/mood` exactly as defined in server.js:\n        //    POST /api/mood \n        //    Body: { userMessages: [ \"I feel sad\", \"I’m lonely\", … ] }\n        const res = await axios.post(`${BACKEND_URL}/api/mood`, {\n          userMessages\n        });\n        const newMood = res.data.mood; // e.g. \"happy\", \"sad\", etc.\n        setMood(newMood);\n      } catch (err) {\n        var _err$response;\n        console.error(\"Error fetching /api/mood:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n        setMood(\"neutral\"); // fallback if the API fails\n      }\n    }\n    fetchMood();\n  }, [userMessages]);\n\n  // 2) Whenever `mood` changes, fetch a 1–2 sentence description\n  //    from `/api/mood-description`. Until it arrives, show a placeholder.\n  useEffect(() => {\n    let isMounted = true;\n    async function fetchDescription() {\n      if (!mood) {\n        if (isMounted) setDescription(\"\");\n        return;\n      }\n      // Show a loading placeholder while waiting\n      if (isMounted) {\n        setLoadingDesc(true);\n        setDescription(\"Loading description…\");\n      }\n      const desc = await getMoodDescription(mood);\n      if (isMounted) {\n        setDescription(desc);\n        setLoadingDesc(false);\n      }\n    }\n    fetchDescription();\n    return () => {\n      isMounted = false;\n    };\n  }, [mood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"0 auto\",\n      padding: \"44px 0\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 32,\n        padding: \"18px 30px\",\n        background: \"#f3f7ff\",\n        borderRadius: 12,\n        border: \"1px solid #dbeafe\",\n        fontSize: 20,\n        color: \"#183153\",\n        textAlign: \"center\",\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: 500,\n          fontSize: 22,\n          color: \"#375bb6\"\n        },\n        children: \"Mood detected:\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          fontWeight: 700,\n          fontSize: 22,\n          textTransform: \"capitalize\"\n        },\n        children: mood || \"—\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: 12,\n          fontSize: 17,\n          minHeight: 24\n        },\n        children: loadingDesc ? \"Loading description…\" : description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SocialMediaFeed, {\n      mood: mood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n/**\r\n * -------------------------------------------------------------\r\n *  NAMED EXPORT: SocialMediaFeed\r\n *\r\n *  - Shows the “Generate Mood Feed” button.\r\n *  - When clicked, uses the passed-in `mood` to:\r\n *      1) Call `/api/generate-prompt` → returns `{ dallePrompt }`\r\n *      2) Call `/api/generate-image`   → returns `{ images: [\"<url>\"] }`\r\n *  - Displays the post (avatar + image + caption).\r\n * -------------------------------------------------------------\r\n */\n_s(SocialMediaScreen, \"ewDWs/YNSHL52onpKEkb6xZQNnU=\");\n_c = SocialMediaScreen;\nexport function SocialMediaFeed({\n  mood\n}) {\n  _s2();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 1) Generate a DALL·E prompt from the mood\n  async function getPrompt(mood) {\n    const res = await axios.post(`${BACKEND_URL}/api/generate-prompt`, {\n      mood\n    });\n    return res.data.dallePrompt;\n  }\n\n  // 2) Generate an image from that prompt\n  async function getImage(prompt) {\n    const res = await axios.post(`${BACKEND_URL}/api/generate-image`, {\n      prompt\n    });\n    // The backend returns { images: [\"<url>\"] }\n    return res.data.images[0];\n  }\n\n  // Called when you click “Generate Mood Feed”\n  const handleGenerateFeed = async () => {\n    setLoading(true);\n    setError(null);\n    setPost(null);\n    try {\n      // If `mood` is empty, default to \"neutral\"\n      const extractedMood = mood || \"neutral\";\n\n      // 1) Get a DALL·E prompt for this mood:\n      const promptText = await getPrompt(extractedMood);\n\n      // 2) Generate an AI image from that prompt:\n      const imageUrl = await getImage(promptText);\n\n      // 3) Build the post object\n      setPost({\n        mood: extractedMood,\n        prompt: promptText,\n        imageUrl\n      });\n    } catch (e) {\n      var _e$response;\n      console.error(\"Error generating feed:\", ((_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.data) || e.message);\n      setError(\"Failed to generate feed. Please try again.\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: \"40px auto\",\n      padding: 24,\n      background: \"#fafafa\",\n      borderRadius: 16,\n      boxShadow: \"0 3px 12px rgba(0,0,0,0.08)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        marginBottom: 20\n      },\n      children: \"Social Mood Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateFeed,\n      disabled: loading,\n      style: {\n        background: \"#333\",\n        color: \"#fff\",\n        fontSize: 18,\n        border: \"none\",\n        borderRadius: 8,\n        padding: \"12px 24px\",\n        margin: \"0 auto 30px auto\",\n        display: \"block\",\n        cursor: loading ? \"wait\" : \"pointer\"\n      },\n      children: loading ? \"Generating...\" : \"Generate Mood Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        margin: 16\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }, this), post && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        background: \"#fff\",\n        borderRadius: 12,\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          padding: \"12px 16px\",\n          borderBottom: \"1px solid #eee\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 36,\n            height: 36,\n            borderRadius: \"50%\",\n            backgroundImage: `url(\"https://i.pravatar.cc/150?img=12\")`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n            marginRight: 12\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 600,\n            fontSize: 16\n          },\n          children: \"AI_Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.imageUrl,\n        alt: \"AI generated\",\n        style: {\n          width: \"100%\",\n          display: \"block\",\n          objectFit: \"cover\",\n          maxHeight: 500\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\",\n          padding: \"8px 16px\",\n          gap: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"like\",\n          style: {\n            fontSize: 24,\n            cursor: \"pointer\"\n          },\n          children: \"\\u2764\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"comment\",\n          style: {\n            fontSize: 24,\n            cursor: \"pointer\"\n          },\n          children: \"\\uD83D\\uDCAC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"share\",\n          style: {\n            fontSize: 24,\n            cursor: \"pointer\"\n          },\n          children: \"\\uD83D\\uDCE4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"0 16px 16px 16px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 600,\n            marginRight: 8\n          },\n          children: \"AI_Generator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"#333\"\n          },\n          children: post.prompt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8,\n            color: \"#999\",\n            fontSize: 14\n          },\n          children: [\"#\", post.mood, \"vibes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s2(SocialMediaFeed, \"ZBGeVT5p44kgONJnhD/ZaPelef8=\");\n_c2 = SocialMediaFeed;\nvar _c, _c2;\n$RefreshReg$(_c, \"SocialMediaScreen\");\n$RefreshReg$(_c2, \"SocialMediaFeed\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","BACKEND_URL","getMoodDescription","mood","res","post","trim","data","description","err","console","error","SocialMediaScreen","userMessages","_s","setMood","setDescription","loadingDesc","setLoadingDesc","fetchMood","Array","isArray","length","newMood","_err$response","response","message","isMounted","fetchDescription","desc","style","maxWidth","margin","padding","children","marginBottom","background","borderRadius","border","fontSize","color","textAlign","boxShadow","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","textTransform","marginTop","minHeight","SocialMediaFeed","_c","_s2","setPost","loading","setLoading","setError","getPrompt","dallePrompt","getImage","prompt","images","handleGenerateFeed","extractedMood","promptText","imageUrl","e","_e$response","onClick","disabled","display","cursor","overflow","alignItems","borderBottom","width","height","backgroundImage","backgroundSize","backgroundPosition","marginRight","src","alt","objectFit","maxHeight","gap","role","_c2","$RefreshReg$"],"sources":["C:/Users/20184080/OneDrive - TU Eindhoven/Documents/2. Industrial Design/Final Master Project/therapeutic-chatbot/frontend/src/components/SocialMediaScreen.js"],"sourcesContent":["// src/components/SocialMediaScreen.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst BACKEND_URL = \"http://localhost:5000\"; // adjust if your server runs elsewhere\r\n\r\n/**\r\n * Calls your backend’s `/api/mood-description` endpoint.\r\n * Returns a 1–2 sentence description from OpenAI, or a simple fallback if it fails.\r\n */\r\nasync function getMoodDescription(mood) {\r\n  if (!mood || typeof mood !== \"string\") {\r\n    return \"\";\r\n  }\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      `${BACKEND_URL}/api/mood-description`,\r\n      { mood: mood.trim() }\r\n    );\r\n    return res.data.description; // e.g. \"When someone feels happy, it often means…\"\r\n  } catch (err) {\r\n    console.error(\"Failed to fetch mood description:\", err);\r\n    // Fallback: a simple local message\r\n    return `You seem to be feeling ${mood}.`;\r\n  }\r\n}\r\n\r\n/**\r\n * -------------------------------------------------------------\r\n *  DEFAULT EXPORT: SocialMediaScreen\r\n *\r\n *  - Shows a header with “Mood detected: X” and a 1–2 sentence\r\n *    description (fetched from /api/mood-description).\r\n *  - Renders <SocialMediaFeed mood={mood} /> underneath.\r\n * -------------------------------------------------------------\r\n */\r\nexport default function SocialMediaScreen({ userMessages }) {\r\n  \r\n  const [mood, setMood] = useState(\"\");            \r\n  const [description, setDescription] = useState(\"\"); \r\n  const [loadingDesc, setLoadingDesc] = useState(false);\r\n\r\n  // 1) Whenever `userMessages` changes, call `/api/mood`.\r\n  useEffect(() => {\r\n    async function fetchMood() {\r\n      if (!Array.isArray(userMessages) || userMessages.length === 0) {\r\n        // No user messages yet—clear mood\r\n        setMood(\"\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Call your backend’s `/api/mood` exactly as defined in server.js:\r\n        //    POST /api/mood \r\n        //    Body: { userMessages: [ \"I feel sad\", \"I’m lonely\", … ] }\r\n        const res = await axios.post(`${BACKEND_URL}/api/mood`, { userMessages });\r\n        const newMood = res.data.mood; // e.g. \"happy\", \"sad\", etc.\r\n        setMood(newMood);\r\n      } catch (err) {\r\n        console.error(\"Error fetching /api/mood:\", err.response?.data || err.message);\r\n        setMood(\"neutral\"); // fallback if the API fails\r\n      }\r\n    }\r\n\r\n    fetchMood();\r\n  }, [userMessages]);\r\n\r\n\r\n  // 2) Whenever `mood` changes, fetch a 1–2 sentence description\r\n  //    from `/api/mood-description`. Until it arrives, show a placeholder.\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    async function fetchDescription() {\r\n      if (!mood) {\r\n        if (isMounted) setDescription(\"\");\r\n        return;\r\n      }\r\n      // Show a loading placeholder while waiting\r\n      if (isMounted) {\r\n        setLoadingDesc(true);\r\n        setDescription(\"Loading description…\");\r\n      }\r\n\r\n      const desc = await getMoodDescription(mood);\r\n      if (isMounted) {\r\n        setDescription(desc);\r\n        setLoadingDesc(false);\r\n      }\r\n    }\r\n    fetchDescription();\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [mood]);\r\n\r\n\r\n  return (\r\n    <div style={{ maxWidth: 600, margin: \"0 auto\", padding: \"44px 0\" }}>\r\n      {/* ─── Header / Text Banner ─── */}\r\n      <div\r\n        style={{\r\n          marginBottom: 32,\r\n          padding: \"18px 30px\",\r\n          background: \"#f3f7ff\",\r\n          borderRadius: 12,\r\n          border: \"1px solid #dbeafe\",\r\n          fontSize: 20,\r\n          color: \"#183153\",\r\n          textAlign: \"center\",\r\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n        }}\r\n      >\r\n        <span style={{ fontWeight: 500, fontSize: 22, color: \"#375bb6\" }}>\r\n          Mood detected:&nbsp;\r\n        </span>\r\n        <span\r\n          style={{\r\n            fontWeight: 700,\r\n            fontSize: 22,\r\n            textTransform: \"capitalize\",\r\n          }}\r\n        >\r\n          {mood || \"—\"}\r\n        </span>\r\n        <div style={{ marginTop: 12, fontSize: 17, minHeight: 24 }}>\r\n          {loadingDesc ? \"Loading description…\" : description}\r\n        </div>\r\n      </div>\r\n\r\n      {/* ─── Below the header, render the feed ─── */}\r\n      <SocialMediaFeed mood={mood} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * -------------------------------------------------------------\r\n *  NAMED EXPORT: SocialMediaFeed\r\n *\r\n *  - Shows the “Generate Mood Feed” button.\r\n *  - When clicked, uses the passed-in `mood` to:\r\n *      1) Call `/api/generate-prompt` → returns `{ dallePrompt }`\r\n *      2) Call `/api/generate-image`   → returns `{ images: [\"<url>\"] }`\r\n *  - Displays the post (avatar + image + caption).\r\n * -------------------------------------------------------------\r\n */\r\nexport function SocialMediaFeed({ mood }) {\r\n  const [post, setPost] = useState(null);  \r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // 1) Generate a DALL·E prompt from the mood\r\n  async function getPrompt(mood) {\r\n    const res = await axios.post(`${BACKEND_URL}/api/generate-prompt`, { mood });\r\n    return res.data.dallePrompt;\r\n  }\r\n\r\n  // 2) Generate an image from that prompt\r\n  async function getImage(prompt) {\r\n    const res = await axios.post(`${BACKEND_URL}/api/generate-image`, { prompt });\r\n    // The backend returns { images: [\"<url>\"] }\r\n    return res.data.images[0];\r\n  }\r\n\r\n  // Called when you click “Generate Mood Feed”\r\n  const handleGenerateFeed = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setPost(null);\r\n\r\n    try {\r\n      // If `mood` is empty, default to \"neutral\"\r\n      const extractedMood = mood || \"neutral\";\r\n\r\n      // 1) Get a DALL·E prompt for this mood:\r\n      const promptText = await getPrompt(extractedMood);\r\n\r\n      // 2) Generate an AI image from that prompt:\r\n      const imageUrl = await getImage(promptText);\r\n\r\n      // 3) Build the post object\r\n      setPost({\r\n        mood: extractedMood,\r\n        prompt: promptText,\r\n        imageUrl,\r\n      });\r\n    } catch (e) {\r\n      console.error(\"Error generating feed:\", e.response?.data || e.message);\r\n      setError(\"Failed to generate feed. Please try again.\");\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        maxWidth: 600,\r\n        margin: \"40px auto\",\r\n        padding: 24,\r\n        background: \"#fafafa\",\r\n        borderRadius: 16,\r\n        boxShadow: \"0 3px 12px rgba(0,0,0,0.08)\",\r\n      }}\r\n    >\r\n      <h2 style={{ textAlign: \"center\", marginBottom: 20 }}>\r\n        Social Mood Feed\r\n      </h2>\r\n\r\n      <button\r\n        onClick={handleGenerateFeed}\r\n        disabled={loading}\r\n        style={{\r\n          background: \"#333\",\r\n          color: \"#fff\",\r\n          fontSize: 18,\r\n          border: \"none\",\r\n          borderRadius: 8,\r\n          padding: \"12px 24px\",\r\n          margin: \"0 auto 30px auto\",\r\n          display: \"block\",\r\n          cursor: loading ? \"wait\" : \"pointer\",\r\n        }}\r\n      >\r\n        {loading ? \"Generating...\" : \"Generate Mood Feed\"}\r\n      </button>\r\n\r\n      {error && <div style={{ color: \"red\", margin: 16 }}>{error}</div>}\r\n\r\n      {post && (\r\n        <div\r\n          style={{\r\n            background: \"#fff\",\r\n            borderRadius: 12,\r\n            boxShadow: \"0 2px 8px rgba(0,0,0,0.1)\",\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          {/* ─── Header (avatar + username) ─── */}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              padding: \"12px 16px\",\r\n              borderBottom: \"1px solid #eee\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: 36,\r\n                height: 36,\r\n                borderRadius: \"50%\",\r\n                backgroundImage: `url(\"https://i.pravatar.cc/150?img=12\")`,\r\n                backgroundSize: \"cover\",\r\n                backgroundPosition: \"center\",\r\n                marginRight: 12,\r\n              }}\r\n            />\r\n            <span style={{ fontWeight: 600, fontSize: 16 }}>AI_Generator</span>\r\n          </div>\r\n\r\n          {/* ─── AI-generated image ─── */}\r\n          <img\r\n            src={post.imageUrl}\r\n            alt=\"AI generated\"\r\n            style={{\r\n              width: \"100%\",\r\n              display: \"block\",\r\n              objectFit: \"cover\",\r\n              maxHeight: 500,\r\n            }}\r\n          />\r\n\r\n          {/* ─── Icon bar (like / comment / share) ─── */}\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              padding: \"8px 16px\",\r\n              gap: 16,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"like\" style={{ fontSize: 24, cursor: \"pointer\" }}>\r\n              ❤️\r\n            </span>\r\n            <span role=\"img\" aria-label=\"comment\" style={{ fontSize: 24, cursor: \"pointer\" }}>\r\n              💬\r\n            </span>\r\n            <span role=\"img\" aria-label=\"share\" style={{ fontSize: 24, cursor: \"pointer\" }}>\r\n              📤\r\n            </span>\r\n          </div>\r\n\r\n          {/* ─── Caption (Prompt + hashtags) ─── */}\r\n          <div style={{ padding: \"0 16px 16px 16px\" }}>\r\n            <span style={{ fontWeight: 600, marginRight: 8 }}>AI_Generator</span>\r\n            <span style={{ color: \"#333\" }}>{post.prompt}</span>\r\n            <div style={{ marginTop: 8, color: \"#999\", fontSize: 14 }}>\r\n              #{post.mood}vibes\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}