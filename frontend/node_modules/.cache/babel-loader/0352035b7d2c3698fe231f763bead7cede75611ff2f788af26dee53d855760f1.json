{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20184080\\\\OneDrive - TU Eindhoven\\\\Documents\\\\2. Industrial Design\\\\Final Master Project\\\\therapeutic-chatbot\\\\frontend\\\\src\\\\components\\\\SocialMediaScreen.js\",\n  _s = $RefreshSig$();\n// src/components/SocialMediaScreen.js\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styles from \"./SocialMediaScreen.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"http://localhost:5000\";\nfunction generatePromptForMood(mood) {\n  if (!mood || typeof mood !== \"string\" || mood.trim() === \"\") {\n    mood = \"neutral\";\n  }\n  return `A stylized photo instagram post (without the UI) designed to support the mood '${mood}':\n\n– If negative (anxious, sad, angry, overwhelmed): show a peaceful scene like gentle ocean waves, soft pastel colors, and a minimal layout with a calm tone.\n– If neutral: show an uplifting article preview or news snippet with balanced composition, soft lighting, and a hint of curiosity or inspiration (like a sunrise or a glowing headline).\n– If positive: display a cheerful, vibrant post celebrating joy—bright colors, confetti, smiling icons, or a celebration scene.\n\nRequirements:\n• Clean layout, subtle shadows, realistic or semi-realistic visual style.`;\n}\nfunction SocialMediaScreen({\n  mood\n}) {\n  _s();\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    console.log(\"Received mood from backend:\", mood);\n  }, [mood]);\n  useEffect(() => {\n    async function fetchImages() {\n      setLoading(true);\n      setError(null);\n      setImages([]);\n      const prompt = generatePromptForMood(mood);\n      try {\n        const response = await axios.post(`${BACKEND_URL}/api/generate-image`, {\n          prompt\n        });\n        setImages(response.data.images || []);\n      } catch (e) {\n        var _e$response, _e$response$data;\n        setImages([]);\n        setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.error) || \"Image generation failed.\");\n      }\n      setLoading(false);\n    }\n    fetchImages();\n  }, [mood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.feedContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.moodInfoBox,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.moodLabel,\n        children: \"Mood detected:\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.moodValue,\n        children: mood || \"neutral\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.moodDescription,\n        children: \"The feed below is generated by AI to visually reflect your mood.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.feedTitle,\n      children: \"Mood-Based Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.loading,\n      children: \"Generating images...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.imageGrid,\n      children: images.length > 0 ? images.map((img, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.imageCard,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: img,\n          alt: `mood img ${idx}`,\n          className: styles.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.noImages,\n        children: \"No images generated.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(SocialMediaScreen, \"ypDxYvnNl+Nee6GODvfe6+OAXeY=\");\n_c = SocialMediaScreen;\nexport default SocialMediaScreen;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaScreen\");","map":{"version":3,"names":["React","useState","useEffect","axios","styles","jsxDEV","_jsxDEV","BACKEND_URL","generatePromptForMood","mood","trim","SocialMediaScreen","_s","images","setImages","loading","setLoading","error","setError","console","log","fetchImages","prompt","response","post","data","e","_e$response","_e$response$data","className","feedContainer","children","moodInfoBox","moodLabel","fileName","_jsxFileName","lineNumber","columnNumber","moodValue","moodDescription","feedTitle","imageGrid","length","map","img","idx","imageCard","src","alt","image","noImages","_c","$RefreshReg$"],"sources":["C:/Users/20184080/OneDrive - TU Eindhoven/Documents/2. Industrial Design/Final Master Project/therapeutic-chatbot/frontend/src/components/SocialMediaScreen.js"],"sourcesContent":["// src/components/SocialMediaScreen.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styles from \"./SocialMediaScreen.module.css\";\r\n\r\nconst BACKEND_URL = \"http://localhost:5000\";\r\n\r\nfunction generatePromptForMood(mood) {\r\n  if (!mood || typeof mood !== \"string\" || mood.trim() === \"\") {\r\n    mood = \"neutral\";\r\n  }\r\n  return `A stylized photo instagram post (without the UI) designed to support the mood '${mood}':\r\n\r\n– If negative (anxious, sad, angry, overwhelmed): show a peaceful scene like gentle ocean waves, soft pastel colors, and a minimal layout with a calm tone.\r\n– If neutral: show an uplifting article preview or news snippet with balanced composition, soft lighting, and a hint of curiosity or inspiration (like a sunrise or a glowing headline).\r\n– If positive: display a cheerful, vibrant post celebrating joy—bright colors, confetti, smiling icons, or a celebration scene.\r\n\r\nRequirements:\r\n• Clean layout, subtle shadows, realistic or semi-realistic visual style.`;\r\n}\r\n\r\nfunction SocialMediaScreen({ mood }) {\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Received mood from backend:\", mood);\r\n  }, [mood]);\r\n\r\n  useEffect(() => {\r\n    async function fetchImages() {\r\n      setLoading(true);\r\n      setError(null);\r\n      setImages([]);\r\n      const prompt = generatePromptForMood(mood);\r\n      try {\r\n        const response = await axios.post(`${BACKEND_URL}/api/generate-image`, {\r\n          prompt,\r\n        });\r\n        setImages(response.data.images || []);\r\n      } catch (e) {\r\n        setImages([]);\r\n        setError(\r\n          e.response?.data?.error || \"Image generation failed.\"\r\n        );\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchImages();\r\n  }, [mood]);\r\n\r\n  return (\r\n    <div className={styles.feedContainer}>\r\n      <div className={styles.moodInfoBox}>\r\n        <span className={styles.moodLabel}>Mood detected:&nbsp;</span>\r\n        <span className={styles.moodValue}>{mood || \"neutral\"}</span>\r\n        <div className={styles.moodDescription}>\r\n          The feed below is generated by AI to visually reflect your mood.\r\n        </div>\r\n      </div>\r\n\r\n      <h2 className={styles.feedTitle}>Mood-Based Feed</h2>\r\n\r\n      {error && <div className={styles.error}>{error}</div>}\r\n\r\n      {loading ? (\r\n        <p className={styles.loading}>Generating images...</p>\r\n      ) : (\r\n        <div className={styles.imageGrid}>\r\n          {images.length > 0 ? (\r\n            images.map((img, idx) => (\r\n              <div key={idx} className={styles.imageCard}>\r\n                <img src={img} alt={`mood img ${idx}`} className={styles.image} />\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div className={styles.noImages}>No images generated.</div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SocialMediaScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}